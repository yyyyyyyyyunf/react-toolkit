name: Publish Packages

on:
  push:
    branches:
      - 'release'
      - 'dev/**'
    tags:
      - 'v*'  # 保留标签触发，用于手动发布
  workflow_dispatch:  # 允许手动触发

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写入权限来推送版本更新
      id-token: write  # 用于 npm 认证
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于版本检测
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install pnpm
        run: |
          npm install -g pnpm@latest
          echo "pnpm version: $(pnpm --version)"
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
      
      - name: Install dependencies
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Installing dependencies..."
          pnpm install --no-frozen-lockfile
          echo "Installation completed"
      
      - name: Run checks
        run: pnpm check
      
      - name: Build packages
        run: pnpm build
      
      - name: Detect changes
        id: changes
        run: |
          ./scripts/detect-changes.sh main
      
      - name: Determine version and tag
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # 标签触发：使用标签版本
            VERSION=${TAG_NAME#v}
            IS_BETA=false
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_BETA=false" >> $GITHUB_OUTPUT
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "PUBLISH_TAG=latest" >> $GITHUB_OUTPUT
            echo "AUTO_INCREMENT=false" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "release" ]]; then
            # release 分支：智能版本管理
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            NEW_PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            IS_BETA=false
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_BETA=false" >> $GITHUB_OUTPUT
            echo "TAG_NAME=v$VERSION" >> $GITHUB_OUTPUT
            echo "PUBLISH_TAG=latest" >> $GITHUB_OUTPUT
            echo "AUTO_INCREMENT=true" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == dev/* ]]; then
            # dev/ 分支：发布 beta 版本（不升级基础版本）
            BASE_VERSION=$(node -p "require('./package.json').version")
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            VERSION="${BASE_VERSION}-beta.${TIMESTAMP}"
            IS_BETA=true
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "IS_BETA=true" >> $GITHUB_OUTPUT
            echo "TAG_NAME=v$VERSION" >> $GITHUB_OUTPUT
            echo "PUBLISH_TAG=beta" >> $GITHUB_OUTPUT
            echo "AUTO_INCREMENT=false" >> $GITHUB_OUTPUT
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi
          
          echo "Branch: $BRANCH_NAME"
          echo "Version: $VERSION"
          echo "Is Beta: $IS_BETA"
          echo "Publish Tag: $PUBLISH_TAG"
          echo "Auto Increment: $AUTO_INCREMENT"
      
      - name: Update package versions
        if: steps.version.outputs.AUTO_INCREMENT == 'true'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # 更新根目录版本（如果有任何变化）
          if [ "${{ steps.changes.outputs.ROOT_CHANGED }}" == "true" ]; then
            npm version $VERSION --no-git-tag-version
            echo "Updated root package.json to version $VERSION"
          fi
          
          # 更新 observer 包版本（如果有 observer 变化）
          if [ "${{ steps.changes.outputs.OBSERVER_CHANGED }}" == "true" ]; then
            cd packages/observer
            npm version $VERSION --no-git-tag-version
            echo "Updated @react-toolkit/observer to version $VERSION"
            cd ../..
          fi
          
          # 更新 memo 包版本（如果有 memo 变化）
          if [ "${{ steps.changes.outputs.MEMO_CHANGED }}" == "true" ]; then
            cd packages/memo
            npm version $VERSION --no-git-tag-version
            echo "Updated @react-toolkit/memo to version $VERSION"
            cd ../..
          fi
      
      - name: Publish @react-toolkit/observer
        if: steps.changes.outputs.OBSERVER_CHANGED == 'true'
        run: |
          cd packages/observer
          npm publish --access public --tag ${{ steps.version.outputs.PUBLISH_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish @react-toolkit/memo
        if: steps.changes.outputs.MEMO_CHANGED == 'true'
        run: |
          cd packages/memo
          npm publish --access public --tag ${{ steps.version.outputs.PUBLISH_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Commit version updates
        if: steps.version.outputs.AUTO_INCREMENT == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.VERSION }}"
          git push origin ${{ github.ref }}
      
      - name: Create Git tag
        if: steps.version.outputs.IS_BETA == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.version.outputs.TAG_NAME }} -m "Beta release ${{ steps.version.outputs.VERSION }}"
          git push origin ${{ steps.version.outputs.TAG_NAME }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.TAG_NAME }}
          release_name: ${{ steps.version.outputs.IS_BETA == 'true' && format('Beta Release {0}', steps.version.outputs.VERSION) || format('Release {0}', steps.version.outputs.VERSION) }}
          body: |
            ## ${{ steps.version.outputs.IS_BETA == 'true' && 'Beta Release' || 'Release' }} ${{ steps.version.outputs.VERSION }}
            
            ${{ steps.version.outputs.IS_BETA == 'true' && 'This is a beta release for testing purposes.' || 'This release includes updates to all @react-toolkit packages.' }}
            
            ### Installation
            ```bash
            npm install @react-toolkit/observer@${{ steps.version.outputs.PUBLISH_TAG }}
            npm install @react-toolkit/memo@${{ steps.version.outputs.PUBLISH_TAG }}
            ```
            
            ### Packages Updated
            - @react-toolkit/observer@${{ steps.version.outputs.VERSION }}
            - @react-toolkit/memo@${{ steps.version.outputs.VERSION }}
            
            ${{ steps.version.outputs.IS_BETA == 'true' && '⚠️ **This is a beta version. Use with caution.**' || '' }}
          draft: false
          prerelease: ${{ steps.version.outputs.IS_BETA == 'true' }}
