name: Publish Packages

on:
  push:
    tags:
      - 'v*'  # 标签触发，用于手动发布
  workflow_dispatch:  # 手动触发
    inputs:
      package:
        description: 'Package to publish (memo, observer, image, feature-detector, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - memo
          - observer
          - image
          - feature-detector
      version_type:
        description: 'Version increment type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install pnpm
        run: |
          npm install -g pnpm@latest
          echo "pnpm version: $(pnpm --version)"
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Run checks
        run: pnpm check
      
      - name: Update package versions
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          SELECTED_PACKAGE="${{ github.event.inputs.package }}"
          
          echo "🎯 版本更新信息:"
          echo "  版本类型: $VERSION_TYPE"
          echo "  选择的包: $SELECTED_PACKAGE"
          
          if [[ "$SELECTED_PACKAGE" == "observer" ]]; then
            # 只更新 observer 包版本
            cd packages/observer
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 observer 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 observer 版本到: $NEW_VERSION"
            cd ../..
          elif [[ "$SELECTED_PACKAGE" == "memo" ]]; then
            # 只更新 memo 包版本
            cd packages/memo
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 memo 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 memo 版本到: $NEW_VERSION"
            cd ../..
          elif [[ "$SELECTED_PACKAGE" == "image" ]]; then
            # 只更新 image 包版本
            cd packages/image
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 image 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 image 版本到: $NEW_VERSION"
            cd ../..
          elif [[ "$SELECTED_PACKAGE" == "feature-detector" ]]; then
            # 只更新 feature-detector 包版本
            cd packages/feature-detector
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 feature-detector 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 feature-detector 版本到: $NEW_VERSION"
            cd ../..
          else
            # 更新所有包版本
            echo "更新所有包版本..."
            
            # 更新 observer 包版本
            cd packages/observer
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 observer 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 observer 版本到: $NEW_VERSION"
            cd ../..
            
            # 更新 memo 包版本
            cd packages/memo
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 memo 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 memo 版本到: $NEW_VERSION"
            cd ../..
            
            # 更新 image 包版本
            cd packages/image
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 image 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 image 版本到: $NEW_VERSION"
            cd ../..
            
            # 更新 feature-detector 包版本
            cd packages/feature-detector
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "当前 feature-detector 版本: $CURRENT_VERSION"
            npm version $VERSION_TYPE --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "更新 feature-detector 版本到: $NEW_VERSION"
            cd ../..
          fi
      
      - name: Update packages.yml
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "📝 更新 packages.yml 文件..."
          node scripts/update-packages-yml.js
      
      - name: Build packages
        run: pnpm build
      
      - name: Show publish info
        run: |
          echo "🎯 发布信息:"
          echo "  触发方式: ${{ github.event_name }}"
          echo "  选择的包: ${{ github.event.inputs.package || 'auto' }}"
          echo "  版本类型: ${{ github.event.inputs.version_type || 'auto' }}"
          echo "  标签: ${{ github.ref_name }}"
          echo ""
          echo "📦 包版本信息:"
          echo "  @fly4react/observer: $(node -p "require('./packages/observer/package.json').version")"
          echo "  @fly4react/memo: $(node -p "require('./packages/memo/package.json').version")"
          echo "  @fly4react/image: $(node -p "require('./packages/image/package.json').version")"
          echo "  @fly4react/feature-detector: $(node -p "require('./packages/feature-detector/package.json').version")"
      
      - name: Publish @fly4react/observer
        if: |
          github.event.inputs.package == 'observer' ||
          github.event.inputs.package == 'all' ||
          github.event_name == 'push'
        run: |
          cd packages/observer
          echo "Publishing @fly4react/observer..."
          
          # 显示当前版本信息
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 当前 package.json 版本: $CURRENT_VERSION"
          
          # 检查 npm 上的最新版本
          NPM_LATEST=$(npm view @fly4react/observer version 2>/dev/null || echo "none")
          echo "📦 npm 上最新版本: $NPM_LATEST"
          
          # 如果版本相同，说明需要递增版本
          if [[ "$CURRENT_VERSION" == "$NPM_LATEST" ]]; then
            echo "⚠️  版本相同，需要递增版本号"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "📦 递增版本到: $NEW_VERSION"
          fi
          
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish @fly4react/memo
        if: |
          github.event.inputs.package == 'memo' ||
          github.event.inputs.package == 'all' ||
          github.event_name == 'push'
        run: |
          cd packages/memo
          echo "Publishing @fly4react/memo..."
          
          # 显示当前版本信息
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 当前 package.json 版本: $CURRENT_VERSION"
          
          # 检查 npm 上的最新版本
          NPM_LATEST=$(npm view @fly4react/memo version 2>/dev/null || echo "none")
          echo "📦 npm 上最新版本: $NPM_LATEST"
          
          # 如果版本相同，说明需要递增版本
          if [[ "$CURRENT_VERSION" == "$NPM_LATEST" ]]; then
            echo "⚠️  版本相同，需要递增版本号"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "📦 递增版本到: $NEW_VERSION"
          fi
          
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish @fly4react/image
        if: |
          github.event.inputs.package == 'image' ||
          github.event.inputs.package == 'all' ||
          github.event_name == 'push'
        run: |
          cd packages/image
          echo "Publishing @fly4react/image..."
          
          # 显示当前版本信息
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 当前 package.json 版本: $CURRENT_VERSION"
          
          # 检查 npm 上的最新版本
          NPM_LATEST=$(npm view @fly4react/image version 2>/dev/null || echo "none")
          echo "📦 npm 上最新版本: $NPM_LATEST"
          
          # 如果版本相同，说明需要递增版本
          if [[ "$CURRENT_VERSION" == "$NPM_LATEST" ]]; then
            echo "⚠️  版本相同，需要递增版本号"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "📦 递增版本到: $NEW_VERSION"
          fi
          
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish @fly4react/feature-detector
        if: |
          github.event.inputs.package == 'feature-detector' ||
          github.event.inputs.package == 'all' ||
          github.event_name == 'push'
        run: |
          cd packages/feature-detector
          echo "Publishing @fly4react/feature-detector..."
          
          # 显示当前版本信息
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "📦 当前 package.json 版本: $CURRENT_VERSION"
          
          # 检查 npm 上的最新版本
          NPM_LATEST=$(npm view @fly4react/feature-detector version 2>/dev/null || echo "none")
          echo "📦 npm 上最新版本: $NPM_LATEST"
          
          # 如果版本相同，说明需要递增版本
          if [[ "$CURRENT_VERSION" == "$NPM_LATEST" ]]; then
            echo "⚠️  版本相同，需要递增版本号"
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "📦 递增版本到: $NEW_VERSION"
          fi
          
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Verify package publication
        run: |
          echo "🔍 验证包发布状态..."
          
          # 检查observer包
          if npm view @fly4react/observer version > /dev/null 2>&1; then
            OBSERVER_VERSION=$(npm view @fly4react/observer version)
            echo "✅ @fly4react/observer 已发布，版本: $OBSERVER_VERSION"
          else
            echo "❌ @fly4react/observer 发布失败"
          fi
          
          # 检查memo包
          if npm view @fly4react/memo version > /dev/null 2>&1; then
            MEMO_VERSION=$(npm view @fly4react/memo version)
            echo "✅ @fly4react/memo 已发布，版本: $MEMO_VERSION"
          else
            echo "❌ @fly4react/memo 发布失败"
          fi
          
          # 检查image包
          if npm view @fly4react/image version > /dev/null 2>&1; then
            IMAGE_VERSION=$(npm view @fly4react/image version)
            echo "✅ @fly4react/image 已发布，版本: $IMAGE_VERSION"
          else
            echo "❌ @fly4react/image 发布失败"
          fi
          
          # 检查feature-detector包
          if npm view @fly4react/feature-detector version > /dev/null 2>&1; then
            FEATURE_DETECTOR_VERSION=$(npm view @fly4react/feature-detector version)
            echo "✅ @fly4react/feature-detector 已发布，版本: $FEATURE_DETECTOR_VERSION"
          else
            echo "❌ @fly4react/feature-detector 发布失败"
          fi
      
      - name: Commit version updates and create tag
        if: github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 更新 packages.yml 文件中的版本信息
          echo "📝 更新 packages.yml 文件..."
          OBSERVER_VERSION=$(node -p "require('./packages/observer/package.json').version")
          MEMO_VERSION=$(node -p "require('./packages/memo/package.json').version")
          IMAGE_VERSION=$(node -p "require('./packages/image/package.json').version")
          FEATURE_DETECTOR_VERSION=$(node -p "require('./packages/feature-detector/package.json').version")
          
          # 使用 sed 直接替换版本号 - 为每个包指定精确的替换
          sed -i "/@fly4react\/observer/,/latest_version:/ s/latest_version: \".*\"/latest_version: \"$OBSERVER_VERSION\"/" .github/packages.yml
          sed -i "/@fly4react\/memo/,/latest_version:/ s/latest_version: \".*\"/latest_version: \"$MEMO_VERSION\"/" .github/packages.yml
          sed -i "/@fly4react\/image/,/latest_version:/ s/latest_version: \".*\"/latest_version: \"$IMAGE_VERSION\"/" .github/packages.yml
          sed -i "/@fly4react\/feature-detector/,/latest_version:/ s/latest_version: \".*\"/latest_version: \"$FEATURE_DETECTOR_VERSION\"/" .github/packages.yml
          
          echo "✅ packages.yml 已更新:"
          echo "  @fly4react/observer: $OBSERVER_VERSION"
          echo "  @fly4react/memo: $MEMO_VERSION"
          echo "  @fly4react/image: $IMAGE_VERSION"
          echo "  @fly4react/feature-detector: $FEATURE_DETECTOR_VERSION"
          
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "chore: bump version via manual trigger"
          
          # 创建新的版本标签 - 使用包名前缀避免冲突
          SELECTED_PACKAGE="${{ github.event.inputs.package }}"
          if [[ "$SELECTED_PACKAGE" == "observer" ]]; then
            NEW_VERSION=$(node -p "require('./packages/observer/package.json').version")
            git tag "observer-v$NEW_VERSION"
            echo "🏷️  创建标签: observer-v$NEW_VERSION"
          elif [[ "$SELECTED_PACKAGE" == "memo" ]]; then
            NEW_VERSION=$(node -p "require('./packages/memo/package.json').version")
            git tag "memo-v$NEW_VERSION"
            echo "🏷️  创建标签: memo-v$NEW_VERSION"
          elif [[ "$SELECTED_PACKAGE" == "image" ]]; then
            NEW_VERSION=$(node -p "require('./packages/image/package.json').version")
            git tag "image-v$NEW_VERSION"
            echo "🏷️  创建标签: image-v$NEW_VERSION"
          elif [[ "$SELECTED_PACKAGE" == "feature-detector" ]]; then
            NEW_VERSION=$(node -p "require('./packages/feature-detector/package.json').version")
            git tag "feature-detector-v$NEW_VERSION"
            echo "🏷️  创建标签: feature-detector-v$NEW_VERSION"
          else
            # 更新所有包时，为每个包创建独立的标签
            OBSERVER_VERSION=$(node -p "require('./packages/observer/package.json').version")
            MEMO_VERSION=$(node -p "require('./packages/memo/package.json').version")
            IMAGE_VERSION=$(node -p "require('./packages/image/package.json').version")
            FEATURE_DETECTOR_VERSION=$(node -p "require('./packages/feature-detector/package.json').version")
            
            git tag "observer-v$OBSERVER_VERSION"
            git tag "memo-v$MEMO_VERSION"
            git tag "image-v$IMAGE_VERSION"
            git tag "feature-detector-v$FEATURE_DETECTOR_VERSION"
            
            echo "🏷️  创建标签: observer-v$OBSERVER_VERSION, memo-v$MEMO_VERSION, image-v$IMAGE_VERSION, feature-detector-v$FEATURE_DETECTOR_VERSION"
          fi
          
          git push origin ${{ github.ref }}
          git push origin --tags
          
          # 为手动触发创建GitHub Release - 使用包名前缀的标签
          echo "📦 创建GitHub Release..."
          SELECTED_PACKAGE="${{ github.event.inputs.package }}"
          if [[ "$SELECTED_PACKAGE" == "observer" ]]; then
            NEW_VERSION=$(node -p "require('./packages/observer/package.json').version")
            gh release create "observer-v$NEW_VERSION" --title "Release @fly4react/observer v$NEW_VERSION" --repo yyyyyyyyyunf/react-toolkit
          elif [[ "$SELECTED_PACKAGE" == "memo" ]]; then
            NEW_VERSION=$(node -p "require('./packages/memo/package.json').version")
            gh release create "memo-v$NEW_VERSION" --title "Release @fly4react/memo v$NEW_VERSION" --repo yyyyyyyyyunf/react-toolkit
          elif [[ "$SELECTED_PACKAGE" == "image" ]]; then
            NEW_VERSION=$(node -p "require('./packages/image/package.json').version")
            gh release create "image-v$NEW_VERSION" --title "Release @fly4react/image v$NEW_VERSION" --repo yyyyyyyyyunf/react-toolkit
          elif [[ "$SELECTED_PACKAGE" == "feature-detector" ]]; then
            NEW_VERSION=$(node -p "require('./packages/feature-detector/package.json').version")
            gh release create "feature-detector-v$NEW_VERSION" --title "Release @fly4react/feature-detector v$NEW_VERSION" --repo yyyyyyyyyunf/react-toolkit
          else
            # 更新所有包时，为每个包创建独立的 Release
            OBSERVER_VERSION=$(node -p "require('./packages/observer/package.json').version")
            MEMO_VERSION=$(node -p "require('./packages/memo/package.json').version")
            IMAGE_VERSION=$(node -p "require('./packages/image/package.json').version")
            FEATURE_DETECTOR_VERSION=$(node -p "require('./packages/feature-detector/package.json').version")
            
            gh release create "observer-v$OBSERVER_VERSION" --title "Release @fly4react/observer v$OBSERVER_VERSION" --repo yyyyyyyyyunf/react-toolkit
            gh release create "memo-v$MEMO_VERSION" --title "Release @fly4react/memo v$MEMO_VERSION" --repo yyyyyyyyyunf/react-toolkit
            gh release create "image-v$IMAGE_VERSION" --title "Release @fly4react/image v$IMAGE_VERSION" --repo yyyyyyyyyunf/react-toolkit
            gh release create "feature-detector-v$FEATURE_DETECTOR_VERSION" --title "Release @fly4react/feature-detector v$FEATURE_DETECTOR_VERSION" --repo yyyyyyyyyunf/react-toolkit
          fi
      
      - name: Auto merge to main
        if: github.ref == 'refs/heads/release'
        run: |
          echo "🔄 自动合并 release 到 main..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 切换到 main 分支
          git checkout main
          git pull origin main
          
          # 合并 release 分支
          git merge origin/release --no-edit
          
          # 推送到 main
          git push origin main
          
          echo "✅ 成功合并到 main 分支"
      
      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            
            This release includes updates to @fly4react packages.
            
            ### Installation
            ```bash
            npm install @fly4react/observer@latest
            npm install @fly4react/memo@latest
            npm install @fly4react/image@latest
            npm install @fly4react/feature-detector@latest
            ```
            
            ### Packages Published
            - @fly4react/observer@$(node -p "require('./packages/observer/package.json').version")
            - @fly4react/memo@$(node -p "require('./packages/memo/package.json').version")
            - @fly4react/image@$(node -p "require('./packages/image/package.json').version")
            - @fly4react/feature-detector@$(node -p "require('./packages/feature-detector/package.json').version")
            
            ### What's New
            - Enhanced intersection observer functionality
            - Improved performance and browser compatibility
            - Better TypeScript support
            - SSR (Server-Side Rendering) support
            - Image optimization and lazy loading utilities
            
            ### Tag Format
            This release uses package-prefixed tags to avoid conflicts:
            - observer-v* for @fly4react/observer releases
            - memo-v* for @fly4react/memo releases  
            - image-v* for @fly4react/image releases
            - feature-detector-v* for @fly4react/feature-detector releases
          draft: false
          prerelease: false
